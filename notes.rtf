#test 

Endpoint: Get Points
Path: /receipts/{id}/points
Method: GET
Response: A JSON object containing the number of points awarded.

--> for GET method -> set for {id}
    -> store points var to receipt object... independent of receipt;
        -> to reduce need for frequent calls to calculate points...
    -> /receipts/{id} could output receipt itself...
    -> /receipts/{id}/{variable} 

--> for POST method
    -> generate uniqueID, store uniqueID
    -> normalize purchaseDate + purchaseTime.
    -> trim short descriptions for each item.
    -> set points to uint (never negative)

--> Future additions:
    -> add + improve user interface, 
    -> add more methods + endpoints



=========
--> PR Review:
--> [Add more input Validations on variables like:
    items, total, dates] 
    Some input validations were missing such as missing items, malformed data, 
    or invalid data (such as a date of 13/13/2023)
--> [Break down points calculation] All point calculation rules are in one point calculation function. 
    This does not follow the single responsibility principle and 
    would make adding unit tests for individual rules harder.

--> [âœ“ Fixed GetPoints] Point calculation occurs during the GET request. 
    This means that the points must be calculated for every GET request 
    instead of just calculating points once on receipt submission [initial POST request].  
    Doing logic on a GET is an anti-pattern and should generally be avoided. 
    [OK] Point calculation also occurs during the POST which is preferred, but this value is not used.
--> [Include Unit Tests] No unit tests included

/**************/
--> August 14 Notes:
--> Model : {Items, Receipt}:
--> Claude Notes:

Yes, the system you're setting up with a unique `ID` for each item instance and a `ProductID` 
(which could be an SKU) is indeed upgradeable and can serve as a solid foundation for a 
full-blown e-commerce platform. Here's how this structure can evolve:

1. Current Structure:
   ```go
   type Item struct {
       ID               uint      `json:"id"`
       ProductID        string    `json:"product_id"`
       ShortDescription string    `json:"shortDescription"`
       Price            string    `json:"price"`
       ReceiptID        uuid.UUID `json:"receipt_id"`
   }
   ```

2. Future E-commerce Evolution:

   a. Expand the `ProductID` concept:
      - The `ProductID` can indeed become your SKU or be linked to an SKU in a separate products table.
      - This allows for consistent product identification across your platform.

   b. Create a separate Products table/structure:
      ```go
      type Product struct {
          SKU              string    `json:"sku"`
          Name             string    `json:"name"`
          Description      string    `json:"description"`
          BasePrice        float64   `json:"base_price"`
          Category         string    `json:"category"`
          Brand            string    `json:"brand"`
          // Add more fields as needed
      }
      ```

   c. Evolve the Item structure:
      ```go
      type Item struct {
          ID               uint      `json:"id"`
          SKU              SKU   `json:"sku"`
          Quantity         int       `json:"quantity"`
          PricePaid        float64   `json:"price_paid"`
          OrderID          uuid.UUID `json:"order_id"`
          // Additional fields for e-commerce
          Status           string    `json:"status"`
          ShippingInfo     ShippingInfo `json:"shipping_info"`
      }
      ```

   d. Introduce an Order structure (evolving from Receipt):
      ```go
      type Order struct {
          ID               uuid.UUID `json:"id"`
          CustomerID       uuid.UUID `json:"customer_id"`
          OrderDate        time.Time `json:"order_date"`
          Status           string    `json:"status"`
          Items            []Item    `json:"items"`
          TotalAmount      float64   `json:"total_amount"`
          // Additional fields
      }
      ```

3. Data Migration Strategy:
   - Your existing `ProductID` can be used to populate the new `SKU` field in both `Product` and `Item` tables.
   - The `ShortDescription` can be used to populate the `Name` in the `Product` table.
   - Existing `Receipt` data can be migrated to the new `Order` structure, with receipts becoming a specific type of order.

4. ID System Upgrades:
   - Item IDs: Keep using auto-incrementing IDs for individual item instances.
   - Product IDs (SKUs): Implement a more robust SKU generation system if needed.
   - Order IDs: Continue using UUIDs, which are already suitable for a distributed system.

5. Database Considerations:
   - Implement proper indexing on SKU, OrderID, and other frequently queried fields.
   - Consider sharding strategies for `Items` and `Orders` tables if you expect high volume.

6. API Evolution:
   - Your existing endpoints can be expanded to include more e-commerce specific operations.
   - Implement versioning in your API to support gradual migration of clients.

This structure allows you to:
- Maintain historical data integrity (old receipts).
- Expand to full product management.
- Scale to handle complex order processing.
- Implement inventory management.
- Add features like customer accounts, multiple shipments per order, etc.

By starting with a system that separates individual item instances (`ID`) from product types 
(`ProductID`/SKU), you've set up a flexible foundation. This approach allows for a smoother transition 
to a full e-commerce system while maintaining the ability to process and analyze receipt data as you do now.

/**************/
// Come up with a way to automatically generate 

SKU Data + Parser + ToString():

1. Amazon electronics: `AMZ-ELEC-SONY-BRAV-SIZE-55-COLOR-BLK-12345`
2. Walmart grocery: `WMT-GROC-NESTLE-CHOC-WEIGHT-100G-67890`
3. Target clothing: `TGT-CLTH-LEVIS-JEAN-SIZE-32-COLOR-BLUE-54321`

In these revised examples:

- `AMZ-ELEC-SONY-BRAV` : Prefix-Category-Manufacturer-ProductLine
- `WMT-GROC-NESTLE-CHOC` : Prefix-Category-Manufacturer-ProductLine
- `TGT-CLTH-LEVIS-JEAN` : Prefix-Category-Manufacturer-ProductLine






skuParser:
    1. Expects at least 5 parts (4 main parts + unique identifier).
    2. Assigns the first four parts to Prefix, ProductCategory, Manufacturer, and ProductLine respectively.
    3. Treats everything between the ProductLine and the last part as key-value attribute pairs.
    4. Assigns the last part as the UniqueIdentifier.

skuPartsToString:
    1. Combines Parts to convert into one string..


-- The parsing code will correctly handle all three example SKUs:

1. For `AMZ-ELEC-SONY-BRAV-SIZE-55-COLOR-BLK-12345`:
   - Prefix: AMZ
   - ProductCategory: ELEC
   - Manufacturer: SONY
   - ProductLine: BRAV
   - Attributes: {"SIZE": "55", "COLOR": "BLK"}
   - UniqueIdentifier: 12345

2. For `WMT-GROC-NESTLE-CHOC-WEIGHT-100G-67890`:
   - Prefix: WMT
   - ProductCategory: GROC
   - Manufacturer: NESTLE
   - ProductLine: CHOC
   - Attributes: {"WEIGHT": "100G"}
   - UniqueIdentifier: 67890

3. For `TGT-CLTH-LEVIS-JEAN-SIZE-32-COLOR-BLUE-54321`:
   - Prefix: TGT
   - ProductCategory: CLTH
   - Manufacturer: LEVIS
   - ProductLine: JEAN
   - Attributes: {"SIZE": "32", "COLOR": "BLUE"}
   - UniqueIdentifier: 54321

This structure and parsing method provide consistency across different retailers 
    while still allowing for flexibility in the number and types of attributes.
